// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as CourseIdImport } from './routes/course/$id';
import { Route as CourseIndexImport } from './routes/course/index';
import { Route as CourseNewImport } from './routes/course/new';
import { Route as CurriculumImport } from './routes/curriculum';
import { Route as IndexImport } from './routes/index';
import { Route as ModuleIdImport } from './routes/module/$id';
import { Route as ModuleCopyIdImport } from './routes/module/copy.$id';
import { Route as ModuleIndexImport } from './routes/module/index';
import { Route as ModuleNewImport } from './routes/module/new';
import { Route as MyCourseImport } from './routes/my-course';
import { Route as OnboardingImport } from './routes/onboarding';
import { Route as SettingsImport } from './routes/settings';
import { Route as StudentCourseIdImport } from './routes/student/course.$id';
import { Route as StudentIndexImport } from './routes/student/index';
import { Route as StudentModulesImport } from './routes/student/modules';

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
    path: '/settings',
    getParentRoute: () => rootRoute,
} as any);

const OnboardingRoute = OnboardingImport.update({
    path: '/onboarding',
    getParentRoute: () => rootRoute,
} as any);

const MyCourseRoute = MyCourseImport.update({
    path: '/my-course',
    getParentRoute: () => rootRoute,
} as any);

const CurriculumRoute = CurriculumImport.update({
    path: '/curriculum',
    getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
    path: '/',
    getParentRoute: () => rootRoute,
} as any);

const StudentIndexRoute = StudentIndexImport.update({
    path: '/student/',
    getParentRoute: () => rootRoute,
} as any);

const ModuleIndexRoute = ModuleIndexImport.update({
    path: '/module/',
    getParentRoute: () => rootRoute,
} as any);

const CourseIndexRoute = CourseIndexImport.update({
    path: '/course/',
    getParentRoute: () => rootRoute,
} as any);

const StudentModulesRoute = StudentModulesImport.update({
    path: '/student/modules',
    getParentRoute: () => rootRoute,
} as any);

const ModuleNewRoute = ModuleNewImport.update({
    path: '/module/new',
    getParentRoute: () => rootRoute,
} as any);

const ModuleIdRoute = ModuleIdImport.update({
    path: '/module/$id',
    getParentRoute: () => rootRoute,
} as any);

const CourseNewRoute = CourseNewImport.update({
    path: '/course/new',
    getParentRoute: () => rootRoute,
} as any);

const CourseIdRoute = CourseIdImport.update({
    path: '/course/$id',
    getParentRoute: () => rootRoute,
} as any);

const StudentCourseIdRoute = StudentCourseIdImport.update({
    path: '/student/course/$id',
    getParentRoute: () => rootRoute,
} as any);

const ModuleCopyIdRoute = ModuleCopyIdImport.update({
    path: '/module/copy/$id',
    getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
    interface FileRoutesByPath {
        '/': {
            preLoaderRoute: typeof IndexImport;
            parentRoute: typeof rootRoute;
        };
        '/curriculum': {
            preLoaderRoute: typeof CurriculumImport;
            parentRoute: typeof rootRoute;
        };
        '/my-course': {
            preLoaderRoute: typeof MyCourseImport;
            parentRoute: typeof rootRoute;
        };
        '/onboarding': {
            preLoaderRoute: typeof OnboardingImport;
            parentRoute: typeof rootRoute;
        };
        '/settings': {
            preLoaderRoute: typeof SettingsImport;
            parentRoute: typeof rootRoute;
        };
        '/course/$id': {
            preLoaderRoute: typeof CourseIdImport;
            parentRoute: typeof rootRoute;
        };
        '/course/new': {
            preLoaderRoute: typeof CourseNewImport;
            parentRoute: typeof rootRoute;
        };
        '/module/$id': {
            preLoaderRoute: typeof ModuleIdImport;
            parentRoute: typeof rootRoute;
        };
        '/module/new': {
            preLoaderRoute: typeof ModuleNewImport;
            parentRoute: typeof rootRoute;
        };
        '/student/modules': {
            preLoaderRoute: typeof StudentModulesImport;
            parentRoute: typeof rootRoute;
        };
        '/course/': {
            preLoaderRoute: typeof CourseIndexImport;
            parentRoute: typeof rootRoute;
        };
        '/module/': {
            preLoaderRoute: typeof ModuleIndexImport;
            parentRoute: typeof rootRoute;
        };
        '/student/': {
            preLoaderRoute: typeof StudentIndexImport;
            parentRoute: typeof rootRoute;
        };
        '/module/copy/$id': {
            preLoaderRoute: typeof ModuleCopyIdImport;
            parentRoute: typeof rootRoute;
        };
        '/student/course/$id': {
            preLoaderRoute: typeof StudentCourseIdImport;
            parentRoute: typeof rootRoute;
        };
    }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
    IndexRoute,
    CurriculumRoute,
    MyCourseRoute,
    OnboardingRoute,
    SettingsRoute,
    CourseIdRoute,
    CourseNewRoute,
    ModuleIdRoute,
    ModuleNewRoute,
    StudentModulesRoute,
    CourseIndexRoute,
    ModuleIndexRoute,
    StudentIndexRoute,
    ModuleCopyIdRoute,
    StudentCourseIdRoute,
]);
